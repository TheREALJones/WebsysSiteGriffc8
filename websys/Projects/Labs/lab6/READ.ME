Lab 6

Each class that I made has two functions that are both defined in the base class. The first is a function that computes the answer of the operation and the second provides a string that can be put on the page. I edited the operate function to take in an argument so that it can be used multiple times with different values within the same class but I gave it a default value so that it doesnt need input in every class.
All of the simple operators, Addition, Subtraction, Multiplication, Division, Exponents and Modulo, work in essentially the same way. The button is pressed, the getEquation function is called, the getEquation function calls the operate function and the answer along with the surrounding string is added to the page.
The two more complicated functions do almost the same thing but their getEquation function runs two different instances of the operate function that take an operand as and arguement so that it can find an answer for the number put in both fields.
The factorial operator loops through all of the positive integers lower than the given number, multiplying them to a variable saved as the answer. The "Tip" operator adds both of the amounts paid in order to get the price of the meal and computes the total tip by multiplying that by .2. Then the amount the person in question paid is divided by the total price in order to find out the percentage that person paid for. Finally the tip is multiplied by the percent of the meal they paid for and that is the total tip that person needs to pay.

Using $_GET in my code would have been better in that you wouldnt need to resubmit the form every time you pressed the back button. GET requests are added to the URL which gives them a limit in size but that limit is so hilariously large that there is very little risk of it hurting the functionality of a simple calculator. If I were to use GET I would handle all of the computing server side and just GET the answer instead of posting the numbers to be computed.

There are plenty of other ways to find if a button is pressed. You can give any element a onclick attribute and link a javascript function to it and never need to deal with PHP. That wouldn't be in the spirit of the lab and it would likely be slower because of the added attribute.